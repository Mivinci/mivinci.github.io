<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>博客 on 被门夹过的核桃还补脑吗</title><link>https://xjj.pub/categories/%E5%8D%9A%E5%AE%A2/</link><description>Recent content in 博客 on 被门夹过的核桃还补脑吗</description><generator>Hugo -- gohugo.io</generator><language>en-us</language><copyright>© 2018-2022 XJJ</copyright><lastBuildDate>Tue, 20 Jul 2021 23:35:21 +0800</lastBuildDate><atom:link href="https://xjj.pub/categories/%E5%8D%9A%E5%AE%A2/index.xml" rel="self" type="application/rss+xml"/><item><title>我的博客搭建历程</title><link>https://xjj.pub/idea/blog/</link><pubDate>Tue, 20 Jul 2021 23:35:21 +0800</pubDate><guid>https://xjj.pub/idea/blog/</guid><description>和大多数人一样，我的博客历程从 Hexo 的 NexT 主题开始，并且也经历了从折腾各种主题、各种花里胡哨的功能到极简主义这种寻找所谓「真理」的过程，hhh 😁 。不过和大佬们不一样，我基本没写过什么博客文章，一来是觉得自己对熟悉的东西研究得不够深入，二来就是大多数人在维护博客过程中遇到的问题，我愿称其为学习过程中的「贤者模式」。意思是当学会某个东西的那瞬间，之前决心写篇文章的冲动荡然无存，甚至觉得这么简单的东西写出来不是笑话吗。
不过，我想这种学习过程的贤者时间的产生可能也是因为第一个原因。学会了，但没完全学会。特别是在计算机软件领域，在这个满地框架和各种使用示例的时代，学习成本实在太低，学会使用某个工具或掌握某项技术或许并不要求过多去研究这东西背后的原理。所以，或许当人研究深度的提升会逐渐抵消这种贤者模式的影响。
话题掰回来，第一次使用 Hexo 大概是在 2018 年的暑假，也是我暂停服务端开发转而学习 web 前端的开端，但不久就也对很多人诟病的 node_modules 产生了反感，甚至反胃，也许这就是传说中的「晕包」hhh 😅 。这也是我第一次开始怀疑 web 前端是否在朝正确的方向发展。
于是几个月后，和部分使用过 Hexo 的人一样，开始使用 Hugo，这也是一个静态博客生成引擎，不过它的官网号称世界最快。也许是最快吧（若不考虑 Rust 生态的 mdbook 的话，不过 mdbook 面相的是文档快速生成，并非个人博客，所以两者并不形成竞争关系）但肯定的是 Hugo 比 Hexo 快得多，并且没有庞大的包依赖文件。这得益于 Hugo 的开发语言：Go，这也是我第二喜欢的编程语言（😁 第一当然是 C）
直到现在，本站仍然使用的是 Hugo，主题是使用的我自己开发的 Minima，有兴趣的小伙伴可以试试，顺便三连点个 star。
其中，中途还接触过动态博客，如 wordpress，typecho，甚至还自己开发过博客引擎，最后都因为安全问题夭折。动态博客比起 Hexo 或 Hugo 这样的好处我想就是方便发布和管理文章吧，因为动态博客往往都自带有后台管理系统，这也是极易出现安全问题的方面。
经历了这些后，现在觉得极简才是真理，一个优秀的博客系统需要拥有的特性无非就是：
良好的 SEO 方便的文章管理机制 安全性 其中第一项 SEO（搜索引擎优化）不论是静态还是动态，现在都可以配置到很好的效果，因为从原理上讲，动态博客通常是由服务端现获取数据来返回的 HTML 内容，而静态则是提前将数据渲染成 HTML 文件再交给托管服务托管。所以 SSR 效果两者大同小异，剩下的就看搜索引擎给不给力了。另外在分布式时代，博客响应性能也大部分交给 CDN 平台决定，和博客系统本身关系不大。
第二项是动态博客系统的优势，对于静态博客，会稍微麻烦一点。因为其博客构建阶段在本地完成，所以每次想要更新就不得不打开电脑运行命令来重新生成整个博客网页资源，再使用命令发布到托管平台。但其实可以利用第三方 CI/CD 平台，如 travis，再结合代码托管平台，如 GitHub，来完成自动构建+部署的功能，作者就只需要将注意力集中在文章撰写上。本博客站就使用的是 GitHub 自带的 Actions 来实现的自动构建和部署（具体方法下次再补上吧，下次一定！），总之我每次只需要将文章提交到 GitHub，它便会自动为我构建好网页代码资源，然后将其部署到我的个人域名 xjj.</description></item></channel></rss>