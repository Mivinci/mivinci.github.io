<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>默认分组 on 被门夹过的核桃还补脑吗</title><link>https://xjj.pub/categories/%E9%BB%98%E8%AE%A4%E5%88%86%E7%BB%84/</link><description>Recent content in 默认分组 on 被门夹过的核桃还补脑吗</description><generator>Hugo -- gohugo.io</generator><language>en-us</language><copyright>© 2018-2022 XJJ</copyright><lastBuildDate>Sun, 08 May 2022 14:01:02 +0800</lastBuildDate><atom:link href="https://xjj.pub/categories/%E9%BB%98%E8%AE%A4%E5%88%86%E7%BB%84/index.xml" rel="self" type="application/rss+xml"/><item><title>人和 AI 的区别</title><link>https://xjj.pub/idea/ai/</link><pubDate>Sun, 08 May 2022 14:01:02 +0800</pubDate><guid>https://xjj.pub/idea/ai/</guid><description>当我希望利用机器学习技术解决一个问题是，首先想到的是是否能找到足够多的数据集给模型拟合，这种让机器模拟人做抉择的效果，本质上是概率论和统计学在支撑，数据本身对机器没有任何意义。比如人可以在不接受大量事先的定义或概念的情况下，识别出一句话是否为有讽刺意味的危险言论，这是因为人脑能根据自身的环境产生符合该环境的概念，但机器不能。机器不能创造某个环境下的新概念。这是我认为人跟机器，或者说跟目前的 AI 的区别，是机器目前不能越过的障碍。
我们有更复杂的模型，有含有更多隐藏层的模型，但不管深度再大，本质上还是对数据的归类、线性和非线性的拟合，就是我们人类称为「经验」的东西。人能创造新概念，我认为有一个重要的因素就是人有「自我认知」能力。人知道自己是什么，知道自己的物种和所在环境。你可能会说，这些认知的来源也是从小经历的教育呀。但是我相信一个刚拥有认知能力且尚未经历教化的婴儿也能意识到自己是个个体并且和其他物体不同，婴儿自己创造了「不同」这个新概念，但模型不能，机器不能。
我们还有生成类模型，这些模型和其他深度模型本质上并无区别，机器生成的新东西只是对原有事物的拆分和组合，通过对数据的拟合，来决定哪些元素放到哪些位置。数据集既很庞大又很多样化，所以生成的东西在人类看来，似乎是新的，因为人本身就没见过那么多东西。但是人可以在不接受机器所接受的规模和种类的数据的前提下，创造出真正的新事物。如画、音乐、电影、科学技术、甚至是一次革命。
Alpha Go 战胜人类是赢在算力上，人有生物限制，人的身体结构支撑不了那么高的算力，人不能在一瞬间穷举出所有的情况。但人能理解什么是围棋，而机器只知道围棋规则。我们不能仅靠算力还衡量智能水平。
（开始本文的升华部分）人需要培养创造力，而不是技术力。我们教育应该认识到这一点，不能用人类的弱项去对抗机器的强项，若机器某一天拥有了自我认知能力（虽然我认为在现有的框架上不可能），那那些好莱坞科幻将成为现实，我们要么灭绝，要么成为机器的奴隶。</description></item><item><title>2022 年怎么开始学 Go</title><link>https://xjj.pub/tech/go/</link><pubDate>Wed, 13 Apr 2022 14:40:48 +0800</pubDate><guid>https://xjj.pub/tech/go/</guid><description>纠结了很久是否要水这篇文章，因为实在是太没技术含量了，但最近实在是看不下去了，身边的同学越来越多开始学 Go 但又被国内的教程带偏，加上想到之前的文章不也没技术含量么，所以还是决定动笔。 从我开始接触 Go 的 2019 年到现在，Go 共发生了 3 次重大更新（包括上个月发布的 1.18 版本中正式加入的 Go 泛型）。这是像 Go, Rust 这种比较年轻的语言的特点，特别是 Rust 这种由社区驱动的语言更是更新频繁得离谱。
所以唯一靠谱的只有官方文档。相比 Rust，由于由 Google 一个团队维护，加上对简洁高效的追求，Go 并不太迎合社区需求，没有拼命增加新特性，从今年才发布发型就可看出 Go 的相对保守，我记得从我开始接触社区就有大量提议泛型的声音。
其实 Go 的定位就是高性能网络编程，而这块往往让使用传统编程语言的程序员头疼，也是 Go 团队发明 Go 的初衷。在高效和简洁间寻找平衡，答案就是 Go。
但不要误会，这篇水文题目叫怎么「开始」学，而不是怎么学，我也不会介绍 Go 的历史。意在讲下目前 2022 年 Go 的正确打开方式，包括正确安装环境、工具链使用、代码组织、命名规范、包管理、常用生产发布方式、文档阅读和目前的生态状况。本文也会跟随 Go 的更新进行内容的修改。
第一原则 任何领域都有所谓的 first principal，而编程界的第一原则就是「先看官方文档」没有什么比官方文档更准确。要是你嫌官方文档都是英文看不懂，那你可能不适合研究这行。目前 Go 的国内技术沉淀还不像 Java 那样，充分得可以自给，能给初学者足够多的正确信息，毕竟 Java 主宰市场那么多年。想要学会一门还在发展中的新语言，你不得不直接阅读英文文档和开源项目源码，后者是因为 Go 的模式和传统设计模式不太一样，更何况像模式这种东西也只能靠大量写项目、看大量项目源码才能掌握和正确使用，不是在课上靠老师念念 PPT，学生上讲台耍耍嘴皮子就能学会的 /doge。
另外，技术类的英文（任何语言）都写的很直接，不拐弯抹角，读不懂往往是因为里面的技术名词不熟悉，还有就是计算机的基础知识不扎实，很多文档里一句话带过的内容可能需要深刻的计算机知识才能理解。所以我一直说基础很重要，基础教学很重要，但实际上国内高校的操作。。。不说也罢！
不多说，进入正题。
动手前 你得知道 Go 之前的官网是 golang.google.com，所以严格来讲，Go 是谷歌的编程语言而不是程序员的，我们能用完全是因为谷歌的用爱发电，这么说可能有点过，因为站在理想主义角度，当一个项目变成开源项目后，他本身的所属性质可能就会改变，但不管怎么说，当你在使用（白嫖）一个东西的时候不要忘记它来自哪里。
现在 Go 官网是 go.dev，这似乎是现在的趋势，像 svelte.</description></item><item><title>用 WSL2 在 Windows 上搭建 Linux 开发环境</title><link>https://xjj.pub/tech/wsl2/</link><pubDate>Sat, 26 Mar 2022 14:40:48 +0800</pubDate><guid>https://xjj.pub/tech/wsl2/</guid><description>WSL (Windows Subsystem for Linux) 是 Windows 自带的 Linux 子系统功能，目的是在 Windows 上运行 GNU/Linux 环境，包括大多数命令行工具和一些应用程序，没有传统的虚拟机（如 VMware）或 DualBoot 设置的开销。WSL2 是 WSL 的第二个版本，比第一个版本有更高的性能，具体差别见官方文档 Comparing WSL and WSL2。这篇文章简单记录下 WSL2 的启用方式，你也可以直接根据 官方文档 来操作。
启用 WSL2 目前官方给了自动和手动两种启用方式，较新的 Windows10 和 Windows11 可以使用自动的方式。
自动 以管理员身份打开 PowerShell 或 CMD 运行下面命令即可。
1 wsl --install 手动 启用 Windows 子系统和虚拟机功能。 因为 Windows 默认关闭这两项功能。这一步有图形界面和命令行两种方式。使用命令行的话依次运行下面两个命令即可
打开子系统功能
1 dism /online /enable-feature /featurename:Microsoft-Windows-Subsystem-Linux /all /norestart 打开虚拟机功能
1 dism /online /enable-feature /featurename:VirtualMachinePlatform /all /norestart 使用图形界面的话，首先打开 “控制面板”，然后点击 “程序”，再点击 “启用或关闭 Windows 功能”，勾选 “适用于 Linux 的 Windows 子系统” 和 “虚拟机平台”，最后点击 “确定”。然后会要求重启，立刻重启即可。</description></item><item><title>阅读清单</title><link>https://xjj.pub/read/</link><pubDate>Fri, 11 Mar 2022 11:24:06 +0800</pubDate><guid>https://xjj.pub/read/</guid><description>基础 C 语言程序设计现代方法 CS 自学指南 深入理解计算机系统 (CSAPP) CrashSource - Computer Science 编译原理 The Implementation of Lua 5.0 QuickJS Javascript Engine Crafting Interpreters 服务端 Pattern: Service Mesh Redis 设计与实现 分布式缓存 资讯 GitHub Trending 阮一峰的网络日志</description></item><item><title>A Thought of Open-sourcing</title><link>https://xjj.pub/idea/open-sourcing/</link><pubDate>Sun, 27 Feb 2022 22:01:35 +0800</pubDate><guid>https://xjj.pub/idea/open-sourcing/</guid><description>Open-sourcing does not mean making your codes public so others can use them, it never did.
Instead, it means a chance that everyone can access and help.
Open-sourcing is a way of struggling that the idealists are using in this ridiculous world to reach their wishes. All the ideas shared through opening sources more or less contribute to a brighter and more diverse world.
To open source is to build up trust between you and the world.</description></item><item><title>对“面向对象程序设计”的质疑</title><link>https://xjj.pub/idea/oop/</link><pubDate>Wed, 08 Dec 2021 23:50:35 +0800</pubDate><guid>https://xjj.pub/idea/oop/</guid><description>当讲到面向对象程序设计时，首先告诉你的就是它的三要素：封装、继承、多态。我不确定这里的 “要素” 是不是指的 OOP 的必要条件，即面向对象的程序都有这三个特点，这很奇怪，但几乎所有的书和课堂都在传递这个观点。这是我质疑的第一点，我认为这种总结是错误的，是对 OOP 的误解。
面向对象思想的出现是为了程序的重用性和扩展性，这是前提。
封装
不知从何时起，人们把封装等同于将一堆变量和函数塞进一个叫 class 的东西里。更有语言将 class 作为写代码的开端，并宗教式地宣扬 “一切皆对象” 这种说了当没说的口号。
封装的目的是对 “什么是封装” 最好的阐述，即使用某种机制将一些数据和逻辑隔离起来并向外界提供访问或操作的接口，这样外界并不感知被封装对象的具体实现。显然，这里的机制并不仅仅局限于 class。像结构化类型（struct） 或包（package）模块（module）层面的隔离，甚至是一个函数都能体现这个目的。
继承
这是宣扬 OOP 解决了代码重用性问题的人最大的信仰，因为在他们看来，他们定义的类和类之间必须有所属关系，如果你接受过这种 OOP 的教育，应该对这个例子很熟悉：
1 2 3 4 5 6 7 8 9 10 11 12 13 class Animal { void speak() { /* speak */ } } class Dog extends Animal { @override void speak() { /* bark */ } } class Cat extends Animal { @override void speak() { /* mew */ } } 这群 OOP 狂热分子认为不同的动物就应该属于一个共同的 “动物” 类，但不同的动物对同一个行为（如叫）有不同的表现，所以需要使用 “方法重写” 这种他们认为很高级的特性来实现，并觉得这种实现很有设计感。</description></item><item><title>我可能实现了个高性能 HTTP 路由器</title><link>https://xjj.pub/tech/web/</link><pubDate>Mon, 22 Nov 2021 22:37:55 +0800</pubDate><guid>https://xjj.pub/tech/web/</guid><description>背景 Go 语言标准库提供了完整的 HTTP 协议解析器，并将请求的处理抽象成了 http.Handler 接口，该接口就是传统意义上的 controller。只要对象实现了该接口的 ServeHTTP 方法，就能传入 http.Server，接收并处理 HTTP 请求。如下
1 2 3 4 5 6 7 8 9 type handler struct {} func (h handler) ServeHTTP(w http.ResponseWriter, r *http.Request) { // 处理请求 } func main() { http.ListenAndServe(&amp;#34;:8000&amp;#34;, new(handler)) } 这样，handler 就能收到并处理任何发到 8000 端口的 HTTP 请求。但我们大多数时候需要使用不同的 handler 来处理不同方法、不同路径来的请求，如下面 2 个常见的请求需要 2 个 handler 来分别处理（为方便显示，省略了协议和域名部分）。
GET /user/profile GET /book/introduction 一种最简单的实现方式是在上面 handler 的 ServeHTTP 方法里使用条件判断，如 switch，匹配请求的方法和路径，再在 case 里调用对应的函数来处理。这种方式实现起来十分简单而且处理得很快，但对于有很多路由的服务端程序，需要写很长的条件判断语句。基于 HTTP 的微服务框架 twirp 就是使用的这种方式来处理不同路径的请求，因为微服务一般是不需要很多路由的。</description></item><item><title>对技术的偏见、拖延症</title><link>https://xjj.pub/idea/prejudice-against-technology/</link><pubDate>Tue, 16 Nov 2021 02:18:48 +0800</pubDate><guid>https://xjj.pub/idea/prejudice-against-technology/</guid><description>不知道其他人是怎么样，但我从来没有在技术的学习上获得过以前上学时那种花很久解决一道数学题时的开心，即使是我花了多倍的时间学会一个技术。我说的技术就是指的计算机相关的技术，不论是计算机底层的原理还是上层的各种应用和开发技术。
可能是因为这些技术都是人造的，而数学这种东西是自然的吧（别跟我说数学也是人发明的，人发明的是数学符号，数学逻辑本身向来都是存在的，且被人类发现并用那些符号所描述）在技术的学习过程中，就我而言就是四件事：看文档、看源码、看著作、动手。无一例外，这四件事都是在接受别人规定好的东西，或是在别人规定好的模式中操作。但这些规定几乎是合理的，因为我们的生活条件是在这些规定、技术中提高的，正如你能在一块不到 1 毫米厚的玻璃板上看到这些文字。
那种开心，就算是刨根问底地搞明白内存中数据怎么排布，电子怎么在各个门里面横跳也不会出现，因为你始终明白就算是个组成 晶体管的原料也是由人们堆砌而成。
我喜欢技术，但也对它有所偏见。
拖延症
四个月前，也就是本科刚毕业时，因为我不是科班的，所以决定要系统地学习编译原理，操作系统，计算机网络，顺便设计一个简单的协议用来实现一个 RPC 框架（最后这个是我一直想干的事）。虽然这些有所了解但远没达到系统性的认识，更别说一些细节上的东西。随后的暑假感觉做了很多事但好像又什么也没做，就看了点 Unix 网络编程、IO 复用，Redis 事件库、也跟着一个 Google 工程师的博客试着实现自己的编程语言（也没坚持到最后）。但都是囫囵吞枣，什么也没学会，要我讲也讲不明白。然后就临近开学，导师布置的任务也提上日程了。
暑假唯一干成的事就是正在用的这个叫 Minima 的博客主题，并且现在也在维护。其他没干完的事情只能抽空做了，因为研究生比我想象中的忙太多，没必要的课和杂七杂八的事就能花我大半的精力。。。
希望明年开学前能够把之前拖欠的任务完成，还有刷力扣。</description></item><item><title>关于 Minima 这个主题</title><link>https://xjj.pub/idea/minima/</link><pubDate>Sat, 13 Nov 2021 18:33:48 +0800</pubDate><guid>https://xjj.pub/idea/minima/</guid><description>距离 Minima 的第一次代码提交已经过去 3 个月了，中间经历了很多次迭代，有小功能的添加，也有界面的大改，从来没有哪个项目让我坚持维护了这么久，这可能就是社区驱动的优势（虽然可能只有一两人在用，哈哈）。不过，重要的不是有几个人在用，而是时不时会受到邮件或是 GitHub 发来的 issue 通知，告知我哪里有 bug 或是希望我加个什么新功能，这时候就会让我有维护下去的动力。不过他们可能只是在尝试不同的主题，并不会真的使用我的，就像我最开始玩自建博客的时候一样，花很多时间来挑主题，结果最后还是自己写了一个，嚯嚯。
截止到现在，Minima 只获得了 12 个 star 和 11 个 fork，哈哈有点惨，不过有人会 fork 我是没想到的，估计是想自己拿去改改吧。上个月收到一个 PR，帮我改了一个首页的 bug，我看代码没问题就直接给合并了（原来 PR 被合并后就能自动成为 contributor）刚刚去 他主页 看了看，还在用我的主题，不过他稍微改了改样式，哈哈。
Minima 原本是 Hexo 的一个主题，因为其实一直都想写个 Hugo 主题来用，所以就去 Hexo 的 主题官网 找了个喜欢的来抄了抄 UI，于是就看到了 Minima。一是因为我本来就喜欢极简风格的主题，二是这种风格的界面好实现，没有很花哨的动画。其实 Hugo 的主题很多都是极简的（因为 Hugo 是 Go 语言开发的，所以很多主题作者可能不是前端出身，也就没有很多很炫的 UI）。不过我觉得 Hugo 的极简主题还是差了点设计感，也有些过于简单了，一直没找到能满足我需求的主题。
目前，我的 Hugo 版 Minima 仍保留了原版 Minima 的所有功能，包括暗黑模式、分类和标签索引等，另外还增加了 KaTeX 和 Mermaid 支持，因为我很多时候写的东西里面需要显示公式和图表，在 示例网页 可以查看效果。另外原版 Minima 的 VSCode 风格的代码高亮是我见过做的最好的，所以当时花了很久，才将代码高亮调得和原版比较接近，因为在代码关键字识别准确度上 Hugo 还是比 Hexo 要弱一点。</description></item><item><title>更令人失望的高等教育</title><link>https://xjj.pub/idea/more-disapointing-education/</link><pubDate>Fri, 01 Oct 2021 22:44:16 +0800</pubDate><guid>https://xjj.pub/idea/more-disapointing-education/</guid><description>当了一个月的硕士研究生（下简称研究生），用一个词来形容的话，那只能是「失望」了。首先是垃圾的在线选课系统，我琢磨着就算是单机架构也不止这点并发能力。其次还是关于选课，按照学校要求，研究生需要在一年内修满 33 个学分（专硕少 5 分）。什么概念？就是研一除了政治英语这种必修，至少要上 8 门选修课&amp;hellip; 听上去好像不是很多对不对？可一次课为 4 节连上，加上中途 3 个短暂的课间共 210 分钟，上一次课就是一上午或一下午或一晚上。更离谱的是这些课均匀的分布在每一天&amp;hellip;
本科的时候我说过「上课耽误学习，不上课耽误学位」，这不还得说 3 年·。我不是说研究生上课不好，只能说是跟好一点也不沾边，当然政治课除外 /doge。很多课根本就没必要开设，比如像什么面向对象设计模式啥啥的，这种东西是个脑子正常的人都能花几个小时阅读完撸点代码就明白了，更何况这些东西是需要足够多的项目积累才能真正掌握的。非要硬生生开 32 个学时看老师念 PPT，我人傻了都&amp;hellip;
还有机器学习入门和一系列带高级的课程，哪一个不是能买本靠谱的书最多一个月就能自学完的。对于一些天赋选手，半个月都绰绰有余。然而现实是这些课都是 32 学时起步。
就为了应付这些课程和考试，就会花掉研一大半的时间和精力，我琢磨着各个都是人上人呢，光靠研二一年就能完成科研并发表有效论文。噢忘了！大多都是为了毕业才凑论文的，那没事了。
毫不夸张地说，就计算机学科而言，这些专业课程都是本科应该完成的。哦对，本科也是为了上课而拉时长，没时间学这么多，呵呵。
不过我想这也是必然的结果。除开一些人文和数学上的基础课外，本科的后三年完全有可能通过自学成为一个领域的专家，同时拥有较广阔的知识体系。然而现实是学校开设了又长又没用的必选修课来充斥学生枯燥的生活。
这种教学方式简直是毒药。在这种模式下，确实让大部分人，特别是享乐主义，以一个修完专业课程毕业生的身份，顺利找到工作。实际上工作才使他们正式开始学习生涯&amp;hellip; 而他们的学位也仅仅是个身份。
对于一部分对工作不满意，或是压根没找到工作的人，他们选择了继续读书，而这部分人却是研究生里的绝大多数，所以研究生新生的质量是很低的，很难不这样说。
研究生，可能是他们给自己的第二次机会，如果在和本科同样的模式下培养，那这瓶毒药，只会让他们换个听上去似乎更高级的身份，找到一份本科生就能找到工作，甚至更差。
可能会有人说我在崇尚内卷，很难不反对，内卷这个词已经被玩儿得成为工作学习的同义词了。只要有人在学习，在工作，就会被说成在卷，好像是什么见不得光的事情一样。的确，在大学寝室只要有人学习就会被嘲讽，学习已经变成需要偷偷摸摸进行的事情了 233&amp;hellip;
这种人一般是恐惧知识的，试图通过嘲讽别人来证明自己的价值。现有的高等教育模式是给这类人的福利，让他们不通过有效学习就能获得和其他人一样的待遇和结果，所以他们其实是聪明的。
我同时也极其讨厌像上进、努力、学霸这些说法，我觉得很多被当作需要所谓努力的事情，都是这个时代对人类的基本要求，但大部分人都在自己的制度和要求中圈地自萌，甚至要求别人遵循他的制度。我认为当一个人在挑战也许不可能完成的事情的时候才配得上努力这类词。</description></item><item><title>哈喽 👋</title><link>https://xjj.pub/about/</link><pubDate>Sun, 18 Jul 2021 11:24:06 +0800</pubDate><guid>https://xjj.pub/about/</guid><description>大家好！我是 XJJ，不是洗洁精也没有想静静，你可能是通过我的网名「被门夹过的核桃还补脑吗」认识我的，当然现在可能也叫小丽。我的特点有：
理想主义 懂点理论物理 会点技术 接受过义务教育的义务教育漏网之鱼 LSP 这是我第三次开始写博客，之前两次没能坚持下去可能都是因为使用了别人的博客主题(借口)，所以这次索性先写了个主题再搭博客。目前已经可以在 Hugo 主题官网 上下载使用这款叫 Minima 的主题。自己挺喜欢的这个主题的，在保持简洁的同时，有些其他主题没有的功能。同时，该主题集成了我写的一个评论插件 OvO。和 Waline 一样，OvO 可以嵌入在其他网页上，为其提供评论功能。
为什么非要写博客？诶，就是玩儿！😅 大概是因为这样：
我不是程序员，也不是设计师，我只是恰好有一些想法和一台电脑。
没错，就是平时 🧠 里经常产生想法，无论是技术的还是生活的，也无论是熟悉的领域的还是不熟悉的领域的。时间久了，有些想法还会重复出现。所以，当尝试着将这些想法记录下来，可能是一种解脱。不过，由于平时并没有较多的精力来记录，所以你会看到前几年只有稀稀散散几篇文章，另外还删了几篇物理上的文章。不过我想今后应该会有所改善，并尽量多记录下技术钻研上，但不会记录技术学习之类的总结，因为这些东西一搜一大把，我更愿意记录自己的思考，小到技术大到宇宙。有些文章中表达的想法可能比较激进，就当我是在圈地自萌～
最后，若你恰好看到这个博客网站，又恰好看到这一行字，这是我的 在线简历 🤗。</description></item><item><title>万物皆弹簧</title><link>https://xjj.pub/idea/tayor-expansion/</link><pubDate>Mon, 03 Feb 2020 18:34:00 +0800</pubDate><guid>https://xjj.pub/idea/tayor-expansion/</guid><description>你要是上过幼儿园小班呢，应该知道势能是位置的函数，表示为 $V(\textbf{r})$，其中 $\textbf{r}$是位矢。在一范围内若某个点的势能达到极小值，则称该点为稳态点 $\textbf{r}_s$，即
对势能函数在稳态点使用泰勒展开并忽略 2 阶后的项得到
$$ V(\textbf{r})=V(\textbf{r}_s)+V^{'}(\textbf{r}_s)(\textbf{r}-\textbf{r}_s)+\frac{V^{''}(\textbf{r}_s)}{2!}(\textbf{r}-\textbf{r}_s)^2 $$
然后把稳态点当作零势能参考点，则有
$$ V(\textbf{r}_s)=0 $$
联立这三个式子得到稳态点处势能的低阶近似为
$$ V(\textbf{r})\approx\frac{V^{''}(\textbf{r}_s)}{2!}(\textbf{r}-\textbf{r}_s)^2 $$
这是势能关于位置的二次函数，其中 $V^{''}(\textbf{r}_s)$ 为某个常数 $k$。
到这儿，要是你还有幸上过幼儿园大班的话，应该知道「力」是势能对位置的导数，所以稳态点附近的粒子受到的力为
$$ \textbf{F}(\textbf{r})=-\frac{dV(\textbf{r})}{d\textbf{r}}=-k(\textbf{r}-\textbf{r}_s) $$
其中 $\textbf{r}-\textbf{r}_s$ 表示在稳态点附近的位移变化，用 $\Delta{\textbf{r}}$ 表示吧。
若是一维的情况，上式变为
$$ \textbf{F}(\textbf{x})=-k\Delta{\textbf{x}} $$
这不就是「胡克定律」吗，即弹簧的弹力与其位移变化量成正比。其中的负号表示该力为吸引力。
这告诉我们在稳态点附近的受力情况可以不依赖势能函数的具体形式，只跟位置变化量成正比关系，近似一种弹簧的弹力。
出现在稳态点附近的运动无处不在，小到固体中原子因与附近原子相互作用而产生的震动，大到你这几天躺床上强行被叫起来吃饭时心里产生的扰动，都可以看成是弹力的作用。所以人类的本质其实是弹簧，你越处在使自己舒适的地方，你就越靠近你的稳态点，你受力的低阶近似就越精确，你就越是根弹簧。</description></item><item><title>关于「信息量大」这句话</title><link>https://xjj.pub/idea/entropy/</link><pubDate>Fri, 03 Jan 2020 19:40:53 +0800</pubDate><guid>https://xjj.pub/idea/entropy/</guid><description>前几天在知乎上看到一个问题：一句话的信息量能大到什么程度？看到评论区很多回复像
对方正在输入&amp;hellip; 一切皆有可能 呵呵…… 之类的，还获得了很多的点赞。当时突然想什么是信息，什么又是信息量？当你面对一件事情，难道不是那些有用的数据对你来说才是信息吗，其他的干扰应该是噪声啊。比如你和一个人聊天，对方给你的回复才是信息呀，而显示 “对方正在输入&amp;hellip;”，并不会让你知道对方要说什么，这句话提供的信息仅仅是“对方正在干回复这件事儿”，而对方要回复的内容是什么，还是有很大的不确定性，这个不确定性是用信息熵来衡量的。
所以我们一直在把信息和信息熵混用。像上面三句话其实是信息熵很大，而信息量反而是很小的，因为你并不能从这些话里的出什么确切的结论。
”一切皆有可能“ 这句话更是直接告诉了你信息熵相当的大。为什么一切皆有可能？是因为你还没有得到足够多的信息来减小事情的不确定性。举个最简单的例子，你的沙雕同学抢了你的硬币，并让你猜在他哪只手里，在他告诉你答案之前，你对硬币在他哪只手是不确定的，现在他告诉你他的左手没有硬币，若他没有说谎，那么他就给了你信息，让你对硬币在他哪只手的不确定性从1降到了2/3，也就是说你的沙雕同学给你了1/3的信息，这1/3的信息通过声波传给了你。
故对于任何事情，你得通过各种方法去收集信息来消灭不确定性，减小信息熵。所以今晚吃什么 😵</description></item><item><title>怎么和最喜欢的人在一起？</title><link>https://xjj.pub/idea/e/</link><pubDate>Mon, 09 Dec 2019 01:40:53 +0800</pubDate><guid>https://xjj.pub/idea/e/</guid><description>你一生中会遇到很多的人，那么如何用最少的交往次数，找到最好的那个和他在一起呢？当然你说你就要全部试一遍，那我也阻止不了你。
首先，你可以先试着和几个人在一起(滑稽)，一段时间后，不管他们有多好，都甩了他们。然后接下来遇到的人，只要比前面被你甩的任何一个人好，就和他一起私奔。好了现在来把问题公式化一下(哎～别走呀，听我说完嘛)
假设有 n 个人，你要放弃前 k 个，从第 k+1 个开始，遇到比前 k 个好的就和他在一起，求 k 为多少使得最好的人被你选中的概率最大。
我们设
事件 $A$ 为：最好的人被你选中
事件 $B_i$ 为：第 i 个人是最好的
我们有全概率公式 $$ P(A)=\sum_{i=k+1}^{n}{P(B_i)P(A|B_i)} $$
其中，这 n 个人是均匀分布的，$P(B_i)$ 就为 $\frac{1}{n}$，所以只要求出 $P(A|B_i)$，就能算出最好的人被你选到的概率 $P(A)$ ，然后再使 $P(A)$ 的导数等于零，就能解出 k 了。
而 $P(A|B_i)$ 表示在第 i 个人是最好的那个人而这个人恰好被你选到的概率。那第 i-1 个就没有前 k 个好，而第 i-1 个没有前 k 个好的概率为 $\frac{k}{i-1}$，所以
$$ P(A)=\frac{1}{n}\sum_{i=k+1}^{n}{\frac{k}{i-1}}=\frac{k}{n}\sum_{i=k+1}^{n-1}{\frac{1}{i}} $$
假设 n 很大很大，也就是你会遇到很多很多的人，我们令 $x=\frac{k}{n}, f(t)=\frac{1}{t}$，上式可以转换为定积分
求 $P(A)$ 极值，令
$$ \frac{dP(A)}{dx}=\frac{d(-xlnx)}{dx}=1-lnx=0 $$
得到 $x=\frac{1}{e}$ ，所以 $k=\frac{n}{e} $</description></item><item><title>朴素贝叶斯分类器</title><link>https://xjj.pub/idea/bayes/</link><pubDate>Sun, 10 Nov 2019 13:52:53 +0800</pubDate><guid>https://xjj.pub/idea/bayes/</guid><description>这篇文章将对朴素贝叶斯分类器进行简单描述和公式推导，并以性别预测为例来理解其「朴素」的原因，最后你应该能根据文章的描述编写一个简单的由人的姓名预测其性别的小程序。阅读前你可能需要懂一些概率论的知识，比如条件概率、贝叶斯公式等等。
基本原理 我们在小学二年级学过贝叶斯公式：
$$ P(B|A)=\frac{P(B)P(A|B)}{P(A)} \tag{1} $$
通过该式子，我们可以算出在已知事件A发生的条件下，事件B发生的概率。比如1当我们看到室友抽屉里藏女士内衣，则室友是个变态的概率就是遇到变态室友的概率乘室友是个变态还喜欢把内衣放抽屉里的概率再除以室友抽屉里有内衣的概率。是不是非常的啊妹zing呀？这里面其实蕴含着「贝叶斯学派」独有的思想，即「后验概率」的思想。感兴趣的同学可以深入了解一下。
现在我们假设上式中的事件A由很多事件构成，即：
$$ A=A_1 \cap A_2 \cap &amp;hellip; \cap A_n $$
则我们的贝叶斯公式变成：
$$ P(B|A_1 A_2 &amp;hellip; A_n)=\frac{P(B)P(A_1 A_2 &amp;hellip; A_n|B)}{P(A_1 A_2 &amp;hellip; A_n)} \tag{2} $$
这其实已经是一个分类器的模型了。我们不妨将事件B看成一推数据的分类结果，将 $A_1,A_2,&amp;hellip;,A_n$ 看成是导致该结果的因素或者叫特征（以下统称特征），则等号左边表示的就是我们的数据属于分类 $B$ 的概率，当其达到某个阈值，我们可以认为该推数据就属于某个分类。
要得到等号左边是多少，我们得从已有的数据中找到等号右边的三项的值。其中 $P(B)$ 可以通过统计数据集中 $B$ 类样本出现的频次得到，即：
$$ P(B)=\frac{B类样本个数}{样本总个数} $$
但剩下的两项很难从有限的数据中直接得出。对于 $P(A_1 A_2 &amp;hellip; A_n|B)$，我们假设所有的特征相互独立，则我们就有： 2
$$ P(A_1 A_2 &amp;hellip; A_n|B)=\prod_{i=1}^{n}{P(A_i|B)} \tag{3} $$
其中 $P(A_i|B)$ 是容易从数据集中直接得到的，分为离散和连续两种情况：
当 $A_i$ 为离散型随机变量时 $$ P(A_i|B)=\frac{B类中有特征A_i的数据个数}{B类数据个数} $$
当 $A_i$ 为连续型随机变量时 假设 $A_i|B$ 符合期望为 $\mu_{ki}$，方差为 $\sigma^2_{ki}$ 的正态分布，则有：</description></item><item><title>卷纸理论</title><link>https://xjj.pub/idea/roll/</link><pubDate>Sun, 13 Jan 2019 13:28:34 +0800</pubDate><guid>https://xjj.pub/idea/roll/</guid><description>假装分析
不妨将卷纸考虑成刚性卷纸，即纸张是不发生径向形变的理想纸张，且每层完全贴合。则卷纸缠绕方式如图：
其中，$r_0$ 为纸筒的半径，$\epsilon$ 为每张纸的厚度。从第一象限开卷并终止于第四象限。过起点做纸筒的切线，将切点与纸筒中心相连得直线 $L_1$，$L_1$ 与 $x$ 轴夹角为 $\theta$ 再过起点做 $L_1$ 的平行线 $L_2$。于是第四象限被直线 $L_1$ 和 $L_2$ 分成三个区域 $A_1$, $A_2$, $A_3$。
因为纸是不发生径向形变的理想纸，所以 $A_1$, $A_3$ 区域里每层纸构成同心圆弧，区域 $A_2$ 的纸不发生弯曲且长度为 $d$。显然，每一圈纸卷了 $2\pi$ 弧度和 $d$ 长度后与下一圈连接。于是有：
$$ \theta=arccos\frac{r_0}{r_0+\epsilon} \tag{1} $$
$$ d=r_0tan\theta \tag{2} $$
考虑 $r_0&amp;raquo;\epsilon$，即纸筒半径远大于纸张厚度的情况下有
$$ \theta\approx arccos\frac{r_0}{r_0}=0 $$
进而有 $d\approx0$，即可以忽略掉区域 $A_2$。所以每圈纸实际上可以看成是同心圆，进而可以很简单地求出卷纸的总长，即同心圆地周长之和。再通过总长对时间的导数就能得出卷纸半径的变化率了。
卷纸总长
考虑到纸的厚度，第 $k$ 圈的平均半径为：
$$ \bar{r}_k = r_0+(k-\frac{1}{2})\epsilon\tag{3} $$
所以卷纸总长为：
$$ \begin{aligned} L&amp;amp;=\sum_{k=1}^{n}{2\pi\bar{r}_k} \cr &amp;amp;=2\pi \Big( nr_0+\epsilon\sum_{k=1}^{n}{\frac{2k-1}{2}}\Big) \cr &amp;amp;=2\pi\Big(nr_0+\frac{n^2}{2}\Big) \end{aligned} $$</description></item></channel></rss>