<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Go on 被门夹过的核桃还补脑吗</title><link>https://xjj.pub/tags/go/</link><description>Recent content in Go on 被门夹过的核桃还补脑吗</description><generator>Hugo -- gohugo.io</generator><language>en-us</language><copyright>© 2018-2022 XJJ</copyright><lastBuildDate>Wed, 13 Apr 2022 14:40:48 +0800</lastBuildDate><atom:link href="https://xjj.pub/tags/go/index.xml" rel="self" type="application/rss+xml"/><item><title>2022 年怎么开始学 Go</title><link>https://xjj.pub/tech/go/</link><pubDate>Wed, 13 Apr 2022 14:40:48 +0800</pubDate><guid>https://xjj.pub/tech/go/</guid><description>纠结了很久是否要水这篇文章，因为实在是太没技术含量了，但最近实在是看不下去了，身边的同学越来越多开始学 Go 但又被国内的教程带偏，加上想到之前的文章不也没技术含量么，所以还是决定动笔。 从我开始接触 Go 的 2019 年到现在，Go 共发生了 3 次重大更新（包括上个月发布的 1.18 版本中正式加入的 Go 泛型）。这是像 Go, Rust 这种比较年轻的语言的特点，特别是 Rust 这种由社区驱动的语言更是更新频繁得离谱。回想起来，我也算是经历了部分 Go 混乱的时间段，虽然是最后那段 😅😅
所以唯一靠谱的只有官方文档。相比 Rust，由于由 Google 的一个团队维护，加上对简洁高效的追求，Go 并不太迎合社区需求，没有拼命增加新特性，从今年才发布发型就可看出 Go 的相对保守，我记得从我开始接触社区就有大量提议泛型的声音。
其实 Go 的定位就是高性能网络编程，而这块往往让使用传统编程语言的程序员头疼，也是 Go 团队发明 Go 的初衷。在高效和简洁间寻找平衡，答案就是 Go。
但不要误会，这篇水文题目叫怎么「开始」学，而不是怎么学，我也不会介绍 Go 的历史。意在讲下目前 2022 年 Go 的正确打开方式，包括正确安装环境、工具链使用、代码组织、命名规范、包管理、常用生产发布方式、文档阅读和目前的生态状况。本文也会跟随 Go 的更新进行内容的修改。
第一原则 任何领域都有所谓的 first principal，而编程界的第一原则就是「先看官方文档」没有什么比官方文档更准确。要是你嫌官方文档都是英文看不懂，那你可能不适合研究这行。目前 Go 的国内技术沉淀还不像 Java 那样，充分得可以自给，能给初学者足够多的正确信息，毕竟 Java 主宰市场那么多年。想要学会一门还在发展中的新语言，你不得不直接阅读英文文档和开源项目源码，后者是因为 Go 的模式和传统设计模式不太一样，更何况像模式这种东西也只能靠大量写项目、看大量项目源码才能掌握和正确使用，不是在课上靠老师念念 PPT，学生上讲台耍耍嘴皮子就能学会的 /doge。
另外，技术类的英文（任何语言）都写的很直接，不拐弯抹角，读不懂往往是因为里面的技术名词不熟悉，还有就是计算机的基础知识不扎实，很多文档里一句话带过的内容可能需要深刻的计算机知识才能理解。所以我一直说基础很重要，基础教学很重要，但实际上国内高校的操作。。。不说也罢！
不多说，进入正题。
动手前 你得知道 Go 之前的官网是 golang.google.com，所以严格来讲，Go 是谷歌的编程语言而不是程序员的，我们能用完全是因为谷歌的用爱发电，这么说可能有点过，因为站在理想主义角度，当一个项目变成开源项目后，他本身的所属性质可能就会改变，但不管怎么说，当你在使用（白嫖）一个东西的时候不要忘记它来自哪里。
现在 Go 官网是 go.</description></item></channel></rss>